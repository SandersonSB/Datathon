pip install pdfminer.six
import streamlit as st
from pdfminer.high_level import extract_text
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import google.generativeai as genai
import re
from dotenv import load_dotenv
import os

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

# Carrega a chave da API do Gemini
chave_api = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=chave_api)

# Inicializa o modelo do Gemini
modelo_gemini = genai.GenerativeModel("gemini-2.5-flash")

# Inicializa estados de sess√£o
if "formulario_enviado" not in st.session_state:
    st.session_state.formulario_enviado = False
if "curriculo_texto" not in st.session_state:
    st.session_state.curriculo_texto = ""
if "descricao_vaga" not in st.session_state:
    st.session_state.descricao_vaga = ""

# T√≠tulo do app
st.title("Analisador de Curr√≠culo com IA üß†üìÑ")

# Fun√ß√£o para extrair texto de um PDF
def extrair_texto_pdf(arquivo_pdf):
    try:
        return extract_text(arquivo_pdf)
    except Exception as e:
        st.error(f"Erro ao extrair texto do PDF: {str(e)}")
        return ""

# Fun√ß√£o para calcular similaridade usando BERT
def calcular_similaridade(texto1, texto2):
    modelo_bert = SentenceTransformer('sentence-transformers/all-mpnet-base-v2')
    emb1 = modelo_bert.encode([texto1])
    emb2 = modelo_bert.encode([texto2])
    return cosine_similarity(emb1, emb2)[0][0]

# Fun√ß√£o para gerar o relat√≥rio com o Gemini
def gerar_relatorio(curriculo, descricao):
    prompt = f"""
# Contexto:
Voc√™ √© um Analisador de Curr√≠culo com IA. Ser√° fornecido um curr√≠culo e uma descri√ß√£o de vaga.

# Instru√ß√µes:
- Avalie o curr√≠culo com base nas habilidades, experi√™ncias e ader√™ncia √† vaga.
- Para cada ponto-chave, forne√ßa uma nota de 0 a 5, um emoji (‚úÖ, ‚ùå, ‚ö†Ô∏è) e uma explica√ß√£o.
- Finalize com a se√ß√£o "Sugest√µes para melhorar seu curr√≠culo".

# Curr√≠culo do Candidato:
{curriculo}

# Descri√ß√£o da Vaga:
{descricao}
"""
    try:
        resposta = modelo_gemini.generate_content(prompt)
        return resposta.text
    except Exception as e:
        return f"Erro ao chamar a API do Gemini: {e}"

# Fun√ß√£o para extrair as pontua√ß√µes x/5 do texto
def extrair_pontuacoes(texto):
    padrao = r'(\d+(?:\.\d+)?)/5'
    correspondencias = re.findall(padrao, texto)
    return [float(p) for p in correspondencias]

# Exibir o formul√°rio se ainda n√£o foi enviado
if not st.session_state.formulario_enviado:
    with st.form("formulario_curriculo"):
        arquivo_curriculo = st.file_uploader("Envie seu curr√≠culo em PDF", type="pdf")
        st.session_state.descricao_vaga = st.text_area("Cole aqui a descri√ß√£o da vaga:", placeholder="Descri√ß√£o da vaga...")

        enviado = st.form_submit_button("Analisar")
        if enviado:
            if arquivo_curriculo and st.session_state.descricao_vaga:
                st.info("Extraindo informa√ß√µes do curr√≠culo...")
                st.session_state.curriculo_texto = extrair_texto_pdf(arquivo_curriculo)
                st.session_state.formulario_enviado = True
                st.rerun()
            else:
                st.warning("Por favor, envie o curr√≠culo e a descri√ß√£o da vaga.")

# Exibir os resultados
if st.session_state.formulario_enviado:
    progresso = st.info("Gerando an√°lises e pontua√ß√µes...")

    # Similaridade entre curr√≠culo e descri√ß√£o
    similaridade = calcular_similaridade(st.session_state.curriculo_texto, st.session_state.descricao_vaga)

    col1, col2 = st.columns(2, border=True)
    with col1:
        st.write("Pontua√ß√£o de similaridade (usada por alguns sistemas ATS):")
        st.subheader(f"{similaridade:.2f}")

    # Chamada da API Gemini para an√°lise detalhada
    relatorio = gerar_relatorio(st.session_state.curriculo_texto, st.session_state.descricao_vaga)

    # C√°lculo da m√©dia das notas
    pontuacoes = extrair_pontuacoes(relatorio)
    media_final = sum(pontuacoes) / (5 * len(pontuacoes)) if pontuacoes else 0

    with col2:
        st.write("Pontua√ß√£o m√©dia baseada na an√°lise da IA:")
        st.subheader(f"{media_final:.2f}")

    progresso.success("An√°lise conclu√≠da com sucesso!")

    # Exibir relat√≥rio
    st.subheader("Relat√≥rio de An√°lise Gerado pela IA:")
    st.markdown(f"""
        <div style='text-align: left; background-color: #000000; padding: 10px; border-radius: 10px; margin: 5px 0; color: white;'>
            {relatorio}
        </div>
    """, unsafe_allow_html=True)

    # Bot√£o para download do relat√≥rio
    st.download_button(
        label="Baixar Relat√≥rio",
        data=relatorio,
        file_name="relatorio_curriculo.txt",
        icon="üì•",
    )

