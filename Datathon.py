import streamlit as st
from pdfminer.high_level import extract_text
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import google.generativeai as genai
import re
from dotenv import load_dotenv
import os

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

# Chave API Gemini
chave_api = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=chave_api)

# Modelo Gemini
modelo_gemini = genai.GenerativeModel("gemini-2.5-flash")

# Estados de sess√£o
if "formulario_enviado" not in st.session_state:
    st.session_state.formulario_enviado = False
if "curriculo_texto" not in st.session_state:
    st.session_state.curriculo_texto = ""
if "descricao_vaga" not in st.session_state:
    st.session_state.descricao_vaga = ""

st.title("Analisador de Curr√≠culo com IA üß†üìÑ")

# Abas
abas = st.tabs([
    "Introdu√ß√£o",
    "An√°lise Pontual",
    "Analisar curr√≠culos em massa no nosso banco de dados"
])

# Aba 1 - Introdu√ß√£o
with abas[0]:
    st.header("Bem-vindo ao Analisador de Curr√≠culos com IA!")
    st.markdown("""
    Esta ferramenta foi criada para facilitar a an√°lise de curr√≠culos utilizando intelig√™ncia artificial avan√ßada.
    
    **O que voc√™ pode fazer aqui?**
    - Analisar curr√≠culos enviados em PDF comparando com a descri√ß√£o da vaga.
    - Buscar e consultar os curr√≠culos j√° armazenados na base de dados.
    - Analisar curr√≠culos em massa do nosso banco de dados para obter insights r√°pidos e eficientes.
    
    Utilize as abas acima para navegar entre as funcionalidades.
    """)

# Fun√ß√µes usadas na an√°lise pontual
def extrair_texto_pdf(arquivo_pdf):
    try:
        return extract_text(arquivo_pdf)
    except Exception as e:
        st.error(f"Erro ao extrair texto do PDF: {str(e)}")
        return ""

def calcular_similaridade(texto1, texto2):
    modelo_bert = SentenceTransformer('sentence-transformers/all-mpnet-base-v2')
    emb1 = modelo_bert.encode([texto1])
    emb2 = modelo_bert.encode([texto2])
    return cosine_similarity(emb1, emb2)[0][0]

def gerar_relatorio(curriculo, descricao):
    prompt = f"""
# Contexto:
Voc√™ √© um Analisador de Curr√≠culo com IA. Ser√° fornecido um curr√≠culo e uma descri√ß√£o de vaga.

# Instru√ß√µes:
- Avalie o curr√≠culo com base nas habilidades, experi√™ncias e ader√™ncia √† vaga.
- Para cada ponto-chave, forne√ßa uma nota de 0 a 5, um emoji (‚úÖ, ‚ùå, ‚ö†Ô∏è) e uma explica√ß√£o.
- Finalize com a se√ß√£o "Sugest√µes para melhorar seu curr√≠culo".

# Curr√≠culo do Candidato:
{curriculo}

# Descri√ß√£o da Vaga:
{descricao}
"""
    try:
        resposta = modelo_gemini.generate_content(prompt)
        return resposta.text
    except Exception as e:
        return f"Erro ao chamar a API do Gemini: {e}"

def extrair_pontuacoes(texto):
    padrao = r'(\d+(?:\.\d+)?)/5'
    correspondencias = re.findall(padrao, texto)
    return [float(p) for p in correspondencias]

# Aba 2 - An√°lise Pontual
with abas[1]:
    if not st.session_state.formulario_enviado:
        with st.form("formulario_curriculo"):
            arquivo_curriculo = st.file_uploader("Envie seu curr√≠culo em PDF", type="pdf")
            st.session_state.descricao_vaga = st.text_area("Cole aqui a descri√ß√£o da vaga:", placeholder="Descri√ß√£o da vaga...")

            enviado = st.form_submit_button("Analisar")
            if enviado:
                if arquivo_curriculo and st.session_state.descricao_vaga.strip() != "":
                    st.info("Extraindo informa√ß√µes do curr√≠culo...")
                    st.session_state.curriculo_texto = extrair_texto_pdf(arquivo_curriculo)
                    st.session_state.formulario_enviado = True
                    st.experimental_rerun()
                else:
                    st.warning("Por favor, envie o curr√≠culo e a descri√ß√£o da vaga.")

    if st.session_state.formulario_enviado:
        progresso = st.info("Gerando an√°lises e pontua√ß√µes...")

        similaridade = calcular_similaridade(st.session_state.curriculo_texto, st.session_state.descricao_vaga)

        col1, col2 = st.columns(2)
        with col1:
            st.write("Pontua√ß√£o de similaridade (usada por alguns sistemas ATS):")
            st.subheader(f"{similaridade:.2f}")

        relatorio = gerar_relatorio(st.session_state.curriculo_texto, st.session_state.descricao_vaga)
        pontuacoes = extrair_pontuacoes(relatorio)
        media_final = sum(pontuacoes) / (5 * len(pontuacoes)) if pontuacoes else 0

        with col2:
            st.write("Pontua√ß√£o m√©dia baseada na an√°lise da IA:")
            st.subheader(f"{media_final:.2f}")

        progresso.success("An√°lise conclu√≠da com sucesso!")

        st.subheader("Relat√≥rio de An√°lise Gerado pela IA:")
        st.markdown(f"""
            <div style='text-align: left; background-color: #000000; padding: 10px; border-radius: 10px; margin: 5px 0; color: white; white-space: pre-wrap;'>
                {relatorio}
            </div>
        """, unsafe_allow_html=True)

        st.download_button(
            label="Baixar Relat√≥rio",
            data=relatorio,
            file_name="relatorio_curriculo.txt",
            icon="üì•",
        )

# Aba 3 - An√°lise em Massa
with abas[2]:
    st.header("Analisar Curr√≠culos em Massa no Nosso Banco de Dados")
    st.markdown("""
    Nesta aba, voc√™ poder√° analisar v√°rios curr√≠culos simultaneamente, diretamente da nossa base de dados.

    **Funcionalidades previstas:**
    - Carregar ou conectar-se √† base de curr√≠culos.
    - Filtrar por crit√©rios espec√≠ficos (exemplo: √°rea, experi√™ncia, forma√ß√£o).
    - Gerar relat√≥rios consolidados com an√°lises de IA para m√∫ltiplos curr√≠culos.
    
    **Em desenvolvimento!**

    Para maiores informa√ß√µes ou sugest√µes, entre em contato com o time respons√°vel.
    """)

    # Exemplo de bot√£o (sem funcionalidade real ainda)
    if st.button("Iniciar an√°lise em massa (em breve)"):
        st.info("Funcionalidade em desenvolvimento. Aguarde as pr√≥ximas atualiza√ß√µes!")

